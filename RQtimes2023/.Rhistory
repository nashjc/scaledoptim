msect(tmax),"sd=",msecr(tmax),"\n")
cat("(Eigenvalue - result from eigen)=",-amax$value-evalmax,"  vector max(abs(diff))=",
max(abs(avecmax-evecmax)),"\n")
nmax<-5
stable<-matrix(NA, nrow=nmax, ncol=4) # to hold results
# =========== works to here, but spg is slower than eigen
# loop over sizes
for (ni in 1:nmax){
n<-100*ni
x<-runif(n) # generate a vector
AA<-molerfast(n) # make sure defined
stable[[ni, 1]]<-n
tbld<-microbenchmark(AA<-molerfast(n), times=mbt)
tspg<-microbenchmark(aspg<-spg(x, fn=rqneg, project=proj,
control=list(trace=FALSE)), times=mbt)
teig<-microbenchmark(aseig<-eigen(AA), times=mbt)
stable[[ni, 2]]<-msect(tspg$time)
stable[[ni, 3]]<-msect(tbld$time)
stable[[ni, 4]]<-msect(teig$time)
}
spgtym<-data.frame(n=stable[,1], spgrqt=stable[,2], tbld=stable[,3], teig=stable[,4])
cat("Times in microsecs using spg() on moler matrix maximal eigensolutions\n")
print(round(spgtym,0))
require(optimx)
nobj<-function(x, AA=-AA){
y<-x/sqrt(as.numeric(crossprod(x)))
rq<- as.numeric(crossprod(y, crossprod(AA,y)))
}
ngrobj<-function(x, AA=-AA){ # gradient
y<-x/sqrt(as.numeric(crossprod(x)))
n<-length(x)
dd<-sqrt(as.numeric(crossprod(x)))
T1<-diag(rep(1,n))/dd
T2<- x%o%x/(dd*dd*dd)
gt<-T1-T2
gy<- as.vector(2.*crossprod(AA,y))
gg<-as.numeric(crossprod(gy, gt))
}
mset<-c("L-BFGS-B", "BFGS", "ncg", "spg", "ucminf", "nlm", "nlminb", "nvm")
for (ni in 1:nmax){
n<-20*ni
x<-runif(n) # generate a vector
AA<-molerfast(n) # make sure defined
aall<-opm(x, fn=nobj, gr=ngrobj, method=mset, AA=-AA,
control=list(trace=0,starttests=FALSE, dowarn=FALSE, kkt=FALSE))
# optansout(aall, NULL)
summary(aall, order=value, )
}
nmax<-5
ctable<-matrix(NA, nrow=nmax, ncol=3)
for (ni in 1:nmax){
n<-100*ni
x<-runif(n) # generate a vector
AA<-molerfast(n) # define matrix
tcgu<-microbenchmark(arcgu<-optimr(x, fn=nobj, gr=ngrobj, method="ncg",
AA=-AA), times=mbt)
ctable[[ni,1]]<-n
ctable[[ni,2]]<-msect(tcgu$time)
ctable[[ni,3]]<-msecr(tcgu$time)
}
cat("Times in microsecs for ncg() to find maximal eigensolutions of moler matrix")
cgtime<-data.frame(n=ctable[,1], tcgmin=ctable[,2], sdtcgmin=ctable[,3])
print(round(cgtime,0))
ax<-function(x, AA){
u<-as.numeric(AA%*%x)
}
bx<-function(x, BB){
v<-as.numeric(BB%*%x)
}
geradin<-function(x, ax, bx, AA, BB, control=list(trace=TRUE, maxit=1000)){
# Geradin minimize Rayleigh Quotient, Nash CMN Alg 25
#  print(control)
trace<-control$trace
n<-length(x)
tol<-n*n*.Machine$double.eps^2
offset<-1e+5 # equality check offset
if (trace) cat("geradin.R, using tol=",tol,"\n")
ipr<-0 # counter for matrix mults
pa<-.Machine$double.xmax
R<-pa
msg<-"no msg"
# step 1 -- main loop
keepgoing<-TRUE
while (keepgoing) {
avec<-ax(x, AA); bvec<-bx(x, BB); ipr<-ipr+1
xax<-as.numeric(crossprod(x, avec));
xbx<-as.numeric(crossprod(x, bvec));
if (xbx <= tol) {
keepgoing<-FALSE # not really needed
msg<-"avoid division by 0 as xbx too small"
break
}
p0<-xax/xbx
if (p0>pa) {
keepgoing<-FALSE # not really needed
msg<-"Rayleigh Quotient increased in step"
break
}
pa<-p0
g<-2*(avec-p0*bvec)/xbx
gg<-as.numeric(crossprod(g)) # step 6
if (trace) cat("Before loop: RQ=",p0," after ",ipr," products, gg=",gg,"\n")
if (gg<tol) { # step 7
keepgoing<-FALSE # not really needed
msg<-"Small gradient -- done"
break
}
t<- -g # step 8
for (itn in 1:n) { # major loop step 9
y<-ax(t, AA); z<-bx(t, BB); ipr<-ipr+1 # step 10
tat<-as.numeric(crossprod(t, y)) # step 11
xat<-as.numeric(crossprod(x, y))
xbt<-as.numeric(crossprod(x, z))
tbt<-as.numeric(crossprod(t, z))
u<-tat*xbt-xat*tbt
v<-tat*xbx-xax*tbt
w<-xat*xbx-xax*xbt
d<-v*v-4*u*w
if (d<0) stop("Geradin: imaginary roots not possible") # step 13
d<-sqrt(d) # step 14
if (v>0) k<--2*w/(v+d) else k<-0.5*(d-v)/u
xlast<-x # NOT as in CNM -- can be avoided with loop
avec<-avec+k*y; bvec<-bvec+k*z # step 15, update
x<-x+k*t
xax<-xax+as.numeric(crossprod(x,avec))
xbx<-xbx+as.numeric(crossprod(x,bvec))
if (xbx<tol) stop("Geradin: xbx has become too small")
chcount<-n - length(which((xlast+offset)==(x+offset)))
if (trace) cat("Number of changed components = ",chcount,"\n")
pn<-xax/xbx # step 17 different order
if (chcount==0) {
keepgoing<-FALSE # not really needed
msg<-"Unchanged parameters -- done"
break
}
if (pn >= p0) {
if (trace) cat("RQ not reduced, restart\n")
break # out of itn loop, not while loop (TEST!)
}
p0<-pn # step 19
g<-2*(avec-pn*bvec)/xbx
gg<-as.numeric(crossprod(g))
if (trace) cat("Itn", itn," RQ=",p0," after ",ipr," products, gg=",gg,"\n")
if (gg<tol){ # step 20
if (trace) cat("Small gradient in iteration, restart\n")
break # out of itn loop, not while loop (TEST!)
}
xbt<-as.numeric(crossprod(x,z)) # step 21
w<-y-pn*z # step 22
tabt<-as.numeric(crossprod(t,w))
beta<-as.numeric(crossprod(g,(w-xbt*g)))
beta<-beta/tabt # step 23
t<-beta*t-g
} # end loop on itn -- step 24
} # end main loop -- step 25
# step 26
ans<-list(x=x, RQ=p0, ipr=ipr, msg=msg)
}
cat("Test geradin with explicit matrix multiplication\n")
n<-10
AA<-molerfast(n)
BB=diag(rep(1,n))
x<-runif(n)
tg<-microbenchmark(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=FALSE)), times=mbt)
cat("Minimal eigensolution\n")
print(ag)
cat("Geradin time=",msect(tg$time),"sd=",msecr(tg$time),"\n")
tgn<-microbenchmark(agn<-geradin(x, ax, bx, AA=-AA, BB=BB,
control=list(trace=FALSE)), times=mbt)
cat("Maximal eigensolution (negative matrix)\n")
print(agn)
cat("Geradin time=",msect(tgn$time),"sd=",msecr(tgn$time),"\n")
naximp<-function(x, A=1){ # implicit moler A*x
n<-length(x)
y<-rep(0,n)
for (i in 1:n){
tt<-0.
for (j in 1:n) {
if (i == j) tt<-tt+i*x[i]
else tt<-tt+(min(i,j) - 2)*x[j]
}
y[i]<- -tt # include negative sign
}
y
}
dyn.load("moler.so")
cat("Is the mat multiply loaded? ",is.loaded("moler"),"\n")
naxftn<-function(x, A) { # ignore second argument
n<-length(x) # could speed up by having this passed
vout<-rep(0,n) # purely for storage
# NEED TO EXPLAIN -1 below
res<-(-1)*(.Fortran("moler", n=as.integer(n), x=as.double(x), vout=as.double(vout)))$vout
}
require(microbenchmark)
nmax<-5
gtable<-matrix(NA, nrow=nmax, ncol=4) # to hold results
# loop over sizes
for (ni in 1:nmax){
n<-100*ni
x<-runif(n) # generate a vector
gtable[[ni, 1]]<-n
AA<-molermat(n)
BB<-diag(rep(1,n))
tgax<-microbenchmark(ogax<-geradin(x, ax, bx, AA=-AA, BB=BB, control=list(trace=FALSE)), times=mbt)
gtable[[ni, 2]]<-msect(tgax$time)
tgaximp<-microbenchmark(ogaximp<-geradin(x, naximp, ident, AA=1, BB=1, control=list(trace=FALSE)), times=mbt)
gtable[[ni, 3]]<-msect(tgaximp$time)
tgaxftn<-microbenchmark(ogaxftn<-geradin(x, naxftn, ident, AA=1, BB=1, control=list(trace=FALSE)), times=mbt)
gtable[[ni, 4]]<-msect(tgaxftn$time)
}
gtym<-data.frame(n=gtable[,1], ax=gtable[,2], aximp=gtable[,3], axftn=gtable[,4])
print(gtym)
for (n in c(100, 200, 300, 400, 500) ) {
x<-runif(n)
evalmax<-emax$evalmax
# evecmax<-emax$evecmax
ogaxftn<-geradin(x, naxftn, ident, AA=1, BB=1, control=list(trace=FALSE))
gvec<-ogaxftn$x
gval<- -ogaxftn$RQ
gvec<-sign(gvec[[1]])*gvec/sqrt(as.numeric(crossprod(gvec)))
diff<-gvec-evecmax
cat("Geradin eigenvalue - eigen result: ",gval-evalmax,"   max(abs(vector diff))=",
max(abs(diff)), "\n")
}
system("gfortran ./a25moler.f")
cat("Geradin fortran version a25moler.f")
tbld100<-msect(microbenchmark(AA<-molerfast(100), times=mbt)$time)
teig100<-msect(microbenchmark(a100<-eigen(AA), times=mbt)$time)
cat("eigen(): n=100 build time=",tbld100,"  eigen time=",teig100,"\n")
vecmin<-a100$vectors[,100]
vecmax<-a100$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a100$values[100],"  RQ=", ray1(vecmin, AA),"\n")
tmin100<-msect(microbenchmark(system("./a.out <n100min.txt > out100min.txt"), times=mbt)$time)
res<-strsplit(readLines("out100min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin100)," \n")
tmax100<-msect(microbenchmark(system("./a.out <n100max.txt > out100max.txt"), times=mbt)$time)
res<-strsplit(readLines("out100max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax100)," \n")
cat("eigen: Maximal Eigenvalue =",a100$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld200<-msect(microbenchmark(AA<-molerfast(200), times=mbt)$time)
teig200<-msect(microbenchmark(a200<-eigen(AA), times=mbt)$time)
cat("eigen(): n=200 build time=",tbld200,"  eigen time=",teig200,"\n")
vecmin<-a200$vectors[,200]
vecmax<-a200$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a200$values[200],"  RQ=", ray1(vecmin, AA),"\n")
tmin200<-msect(microbenchmark(system("./a.out <n200min.txt > out200min.txt"), times=mbt)$time)
res<-strsplit(readLines("out200min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin200)," \n")
tmax200<-msect(microbenchmark(system("./a.out <n200max.txt > out200max.txt"), times=mbt)$time)
res<-strsplit(readLines("out200max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax200)," \n")
cat("eigen: Maximal Eigenvalue =",a200$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld300<-msect(microbenchmark(AA<-molerfast(300), times=mbt)$time)
teig300<-msect(microbenchmark(a300<-eigen(AA), times=mbt)$time)
cat("eigen(): n=300 build time=",tbld300,"  eigen time=",teig300,"\n")
vecmin<-a300$vectors[,300]
vecmax<-a300$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a300$values[300],"  RQ=", ray1(vecmin, AA),"\n")
tmin300<-msect(microbenchmark(system("./a.out <n300min.txt > out300min.txt"), times=mbt)$time)
res<-strsplit(readLines("out300min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin300)," \n")
tmax300<-msect(microbenchmark(system("./a.out <n300max.txt > out300max.txt"), times=mbt)$time)
res<-strsplit(readLines("out300max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax300)," \n")
cat("eigen: Maximal Eigenvalue =",a300$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld400<-msect(microbenchmark(AA<-molerfast(400), times=mbt)$time)
teig400<-msect(microbenchmark(a400<-eigen(AA), times=mbt)$time)
cat("eigen(): n=400 build time=",tbld400,"  eigen time=",teig400,"\n")
vecmin<-a400$vectors[,400]
vecmax<-a400$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a400$values[400],"  RQ=", ray1(vecmin, AA),"\n")
tmin400<-msect(microbenchmark(system("./a.out <n400min.txt > out400min.txt"), times=mbt)$time)
res<-strsplit(readLines("out400min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin400)," \n")
tmax400<-msect(microbenchmark(system("./a.out <n400max.txt > out400max.txt"), times=mbt)$time)
res<-strsplit(readLines("out400max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax400)," \n")
cat("eigen: Maximal Eigenvalue =",a400$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld500<-msect(microbenchmark(AA<-molerfast(500), times=mbt)$time)
teig500<-msect(microbenchmark(a500<-eigen(AA), times=mbt)$time)
cat("eigen(): n=500 build time=",tbld500,"  eigen time=",teig500,"\n")
vecmin<-a500$vectors[,500]
vecmax<-a500$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a500$values[500],"  RQ=", ray1(vecmin, AA),"\n")
tmin500<-msect(microbenchmark(system("./a.out <n500min.txt > out500min.txt"), times=mbt)$time)
res<-strsplit(readLines("out500min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin500)," \n")
tmax500<-msect(microbenchmark(system("./a.out <n500max.txt > out500max.txt"), times=mbt)$time)
res<-strsplit(readLines("out500max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax500)," \n")
cat("eigen: Maximal Eigenvalue =",a500$values[1],"  RQ=", ray1(vecmax, AA),"\n")
library(optimx)
cf<-data.frame(n=bmattym$n,
eig=bmattym$eigentime,
spg=spgtym$spgrqt,
rcg=cgtime$tcgmin,
ger=gtym$axftn )
eigen<-cf$eig/cf$ger
spg<-cf$spg/cf$ger
rcgmin<-cf$rcg/cf$ger
nsize<-cf$n
jn<-data.frame(nsize=nsize, eigen=eigen, spg=spg, rcgmin=rcgmin)
# joe<-write.csv(jn, file="jndata.csv")
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
points(nsize, rcgmin, pch=3)
points(nsize, eigen, pch=4)
title("Ratio of eigensolution times to Geradin routine by matrix size")
points(nsize, rep(1,10), type="l")
library(optimx)
cf<-data.frame(n=bmattym$n,
eig=bmattym$eigentime,
spg=spgtym$spgrqt,
rcg=cgtime$tcgmin,
ger=gtym$axftn )
eigen<-cf$eig/cf$ger
spg<-cf$spg/cf$ger
rcgmin<-cf$rcg/cf$ger
nsize<-cf$n
jn<-data.frame(nsize=nsize, eigen=eigen, spg=spg, rcgmin=rcgmin)
# joe<-write.csv(jn, file="jndata.csv")
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
points(nsize, rcgmin, pch=3)
plot.new()
# joe<-write.csv(jn, file="jndata.csv")
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
points(nsize, rcgmin, pch=3)
points(nsize, eigen, pch=4)
nsize
rcgmin
eigen
spg
jn
cf
cat("Geradin fortran version a25moler.f")
tbld100<-msect(microbenchmark(AA<-molerfast(100), times=mbt)$time)
teig100<-msect(microbenchmark(a100<-eigen(AA), times=mbt)$time)
cat("eigen(): n=100 build time=",tbld100,"  eigen time=",teig100,"\n")
vecmin<-a100$vectors[,100]
vecmax<-a100$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a100$values[100],"  RQ=", ray1(vecmin, AA),"\n")
tmin100<-msect(microbenchmark(system("./a.out <n100min.txt > out100min.txt"), times=mbt)$time)
res<-strsplit(readLines("out100min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin100)," \n")
tmax100<-msect(microbenchmark(system("./a.out <n100max.txt > out100max.txt"), times=mbt)$time)
res<-strsplit(readLines("out100max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax100)," \n")
cat("eigen: Maximal Eigenvalue =",a100$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld200<-msect(microbenchmark(AA<-molerfast(200), times=mbt)$time)
teig200<-msect(microbenchmark(a200<-eigen(AA), times=mbt)$time)
cat("eigen(): n=200 build time=",tbld200,"  eigen time=",teig200,"\n")
vecmin<-a200$vectors[,200]
vecmax<-a200$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a200$values[200],"  RQ=", ray1(vecmin, AA),"\n")
tmin200<-msect(microbenchmark(system("./a.out <n200min.txt > out200min.txt"), times=mbt)$time)
res<-strsplit(readLines("out200min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin200)," \n")
tmax200<-msect(microbenchmark(system("./a.out <n200max.txt > out200max.txt"), times=mbt)$time)
res<-strsplit(readLines("out200max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax200)," \n")
cat("eigen: Maximal Eigenvalue =",a200$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld300<-msect(microbenchmark(AA<-molerfast(300), times=mbt)$time)
teig300<-msect(microbenchmark(a300<-eigen(AA), times=mbt)$time)
cat("eigen(): n=300 build time=",tbld300,"  eigen time=",teig300,"\n")
vecmin<-a300$vectors[,300]
vecmax<-a300$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a300$values[300],"  RQ=", ray1(vecmin, AA),"\n")
tmin300<-msect(microbenchmark(system("./a.out <n300min.txt > out300min.txt"), times=mbt)$time)
res<-strsplit(readLines("out300min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin300)," \n")
tmax300<-msect(microbenchmark(system("./a.out <n300max.txt > out300max.txt"), times=mbt)$time)
res<-strsplit(readLines("out300max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax300)," \n")
cat("eigen: Maximal Eigenvalue =",a300$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld400<-msect(microbenchmark(AA<-molerfast(400), times=mbt)$time)
teig400<-msect(microbenchmark(a400<-eigen(AA), times=mbt)$time)
cat("eigen(): n=400 build time=",tbld400,"  eigen time=",teig400,"\n")
vecmin<-a400$vectors[,400]
vecmax<-a400$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a400$values[400],"  RQ=", ray1(vecmin, AA),"\n")
tmin400<-msect(microbenchmark(system("./a.out <n400min.txt > out400min.txt"), times=mbt)$time)
res<-strsplit(readLines("out400min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin400)," \n")
tmax400<-msect(microbenchmark(system("./a.out <n400max.txt > out400max.txt"), times=mbt)$time)
res<-strsplit(readLines("out400max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax400)," \n")
cat("eigen: Maximal Eigenvalue =",a400$values[1],"  RQ=", ray1(vecmax, AA),"\n")
tbld500<-msect(microbenchmark(AA<-molerfast(500), times=mbt)$time)
teig500<-msect(microbenchmark(a500<-eigen(AA), times=mbt)$time)
cat("eigen(): n=500 build time=",tbld500,"  eigen time=",teig500,"\n")
vecmin<-a500$vectors[,500]
vecmax<-a500$vectors[,1]
cat("eigen: Minimal Eigenvalue =",a500$values[500],"  RQ=", ray1(vecmin, AA),"\n")
tmin500<-msect(microbenchmark(system("./a.out <n500min.txt > out500min.txt"), times=mbt)$time)
res<-strsplit(readLines("out500min.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Min Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmin500)," \n")
tmax500<-msect(microbenchmark(system("./a.out <n500max.txt > out500max.txt"), times=mbt)$time)
res<-strsplit(readLines("out500max.txt"), " ")
resn<-as.numeric(res[[1]][which(res[[1]]!="")])
cat("A25RQM N=", as.integer(resn[1]), " matvec ops=", as.integer(resn[2]),
" Max Est. EV=", resn[3], "  Gradient=",resn[4]," time=",msect(tmax500)," \n")
cat("eigen: Maximal Eigenvalue =",a500$values[1],"  RQ=", ray1(vecmax, AA),"\n")
library(optimx)
cf<-data.frame(n=bmattym$n,
eig=bmattym$eigentime,
spg=spgtym$spgrqt,
rcg=cgtime$tcgmin,
ger=gtym$axftn )
eigen<-cf$eig/cf$ger
spg<-cf$spg/cf$ger
rcgmin<-cf$rcg/cf$ger
nsize<-cf$n
jn<-data.frame(nsize=nsize, eigen=eigen, spg=spg, rcgmin=rcgmin)
# joe<-write.csv(jn, file="jndata.csv")
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
points(nsize, rcgmin, pch=3)
# joe<-write.csv(jn, file="jndata.csv")
plot.new()
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
points(nsize, rcgmin, pch=3)
?plot.new
# joe<-write.csv(jn, file="jndata.csv")
# plot.new()
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
points(nsize, rcgmin, pch=3)
# joe<-write.csv(jn, file="jndata.csv")
# plot.new()
plot(nsize,spg, pch=1, xlab="n", ylab="time ratio")
plot.new()
points(nsize, rcgmin, pch=3)
nsize
spg
plot(nsize, spg)
points(nsize,eigen)
plot(nsize, eigen)
spg
# joe<-write.csv(jn, file="jndata.csv")
plot.new()
plot(nsize,log(spg), pch=1, xlab="n", ylab="time ratio")
# plot.new()
points(nsize, log(rcgmin), pch=3)
plot(nsize,log(spg), pch=1, xlab="n", ylab="time ratio")
plot(nsize,log(spg), pch=1, xlab="n", ylab="time ratio")
points(nsize, log(rcgmin), pch=3)
points(nsize, log(eigen), pch=4)
eigen<-log(cf$eig/cf$ger)
spg<-log(cf$spg/cf$ger)
rcgmin<-log(cf$rcg/cf$ger)
nsize<-cf$n
jn<-data.frame(nsize=nsize, eigen=eigen, spg=spg, rcgmin=rcgmin)
jn
cf
library(optimx)
cf<-data.frame(n=bmattym$n,
eig=bmattym$eigentime,
spg=spgtym$spgrqt,
rcg=cgtime$tcgmin,
ger=gtym$axftn )
eigen<-(cf$eig/cf$ger)
spg<-(cf$spg/cf$ger)
rcgmin<-(cf$rcg/cf$ger)
nsize<-cf$n
jn<-data.frame(nsize=nsize, eigen=eigen, spg=spg, rcgmin=rcgmin)
# joe<-write.csv(jn, file="jndata.csv")
plot.new()
plot(nsize,(spg), pch=1, xlab="n", ylab="time ratio")
# plot.new()
points(nsize, (rcgmin), pch=3)
points(nsize, (eigen), pch=4)
title("Ratio of eigensolution times to Geradin routine by matrix size")
#points(nsize, rep(1,10), type="l")
#legend(50,70,c("spg", "rcgmin","eigen"), pch = c(1,3,4), lty = c(1,2,3))
legend(50,70,c("spg", "rcgmin","eigen"), pch = c(1,3,4))
?plot
