emax <- NULL
save(emax, "temax.Rdata")
?save
emax <- list()
save(emax, "temax.Rdata")
save(emax, file="temax.Rdata")
tt <- load("temax.Rdata")
tt
require(microbenchmark)
?microbenchmark
mbt<-10 # default to 10 repetitions in microbenchmark
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
However, since R is more efficient with vectorized code, the following routine by
```{r molerfast, echo=TRUE}
mbt<-10 # default to 10 repetitions in microbenchmark
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=7) # to hold results
require(compiler)
molerc<-cmpfun(molermat) # compile it
molerfc<-cmpfun(molerfast)
molerfast <- function(n) {
# A fast version of `molermat'
A <- matrix(0, nrow = n, ncol = n)
j <- 1:n
for (i in 1:n) {
A[i, 1:i] <- pmin(i, 1:i) - 2
}
A <- A + t(A)
diag(A) <- 1:n
A
}
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=7) # to hold results
require(compiler)
molerc<-cmpfun(molermat) # compile it
molerfc<-cmpfun(molerfast)
# loop over sizes
for (ni in 1:nmax){
n<-50*ni
mtable[[ni, 1]]<-n
ti<-microbenchmark(ai<-molermat(n), times=mbt)
tc<-microbenchmark(ac<-molerc(n), times=mbt)
if (! identical(ai, ac)) stop("Different outcomes == molermat, molerc")
tfi<-microbenchmark(afi<-molerfast(n), times=mbt)
tfc<-microbenchmark(afc<-molerfc(n), times=mbt)
if (! identical(ai, afi)) stop("Different outcomes == molermat, molerfast")
osize<-object.size(ac)
tevs<-microbenchmark(evs<-eigen(ac), times=mbt)
mtable[[ni,2]]<-ti
mtable[[ni,3]]<-tc
mtable[[ni,4]]<-osize
mtable[[ni,5]]<-tevs
mtable[[ni,6]]<-tfi
mtable[[ni,7]]<-tfc
# cat(n, ti, tc, osize,"\n")
}
t1
ti
str(ti)
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=7) # to hold results
require(compiler)
molerc<-cmpfun(molermat) # compile it
molerfc<-cmpfun(molerfast)
# loop over sizes
for (ni in 1:nmax){
n<-50*ni
mtable[[ni, 1]]<-n
# Note using milliseconds "ms" ("us" for microseconds)
ti<-mean(microbenchmark(ai<-molermat(n), unit="ms", times=mbt)$time)
tc<-mean(microbenchmark(ac<-molerc(n), unit="ms", times=mbt)$time)
if (! identical(ai, ac)) stop("Different outcomes == molermat, molerc")
tfi<-mean(microbenchmark(afi<-molerfast(n), unit="ms", times=mbt)$time)
tfc<-mean(microbenchmark(afc<-molerfc(n), unit="ms", times=mbt)$time)
if (! identical(ai, afi)) stop("Different outcomes == molermat, molerfast")
osize<-object.size(ac)
tevs<-mean(microbenchmark(evs<-eigen(ac), unit="ms", times=mbt)$time)
mtable[[ni,2]]<-ti
mtable[[ni,3]]<-tc
mtable[[ni,4]]<-osize
mtable[[ni,5]]<-tevs
mtable[[ni,6]]<-tfi
mtable[[ni,7]]<-tfc
# cat(n, ti, tc, osize,"\n")
}
ti
ai
ai<-molermat(10)
ai<-molermat(10)
microbenchmark(ai<-molermat(10))
microbenchmark(ai<-molermat(10), times=mbt)
microbenchmark(ai<-molermat(10), unit="ns", times=mbt)
microbenchmark(ai<-molermat(10), unit="us", times=mbt)
mbt<-10 # default to 10 repetitions in microbenchmark
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
molerfast <- function(n) {
# A fast version of `molermat'
A <- matrix(0, nrow = n, ncol = n)
j <- 1:n
for (i in 1:n) {
A[i, 1:i] <- pmin(i, 1:i) - 2
}
A <- A + t(A)
diag(A) <- 1:n
A
}
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=7) # to hold results
require(compiler)
molerc<-cmpfun(molermat) # compile it
molerfc<-cmpfun(molerfast)
# loop over sizes
for (ni in 1:nmax){
n<-50*ni
mtable[[ni, 1]]<-n
# Note using "us" for microseconds
ti<-mean(microbenchmark(ai<-molermat(n), unit="us", times=mbt)$time)
tc<-mean(microbenchmark(ac<-molerc(n), unit="us", times=mbt)$time)
if (! identical(ai, ac)) stop("Different outcomes == molermat, molerc")
tfi<-mean(microbenchmark(afi<-molerfast(n), unit="us", times=mbt)$time)
tfc<-mean(microbenchmark(afc<-molerfc(n), unit="us", times=mbt)$time)
if (! identical(ai, afi)) stop("Different outcomes == molermat, molerfast")
osize<-object.size(ac)
tevs<-mean(microbenchmark(evs<-eigen(ac), unit="us", times=mbt)$time)
mtable[[ni,2]]<-ti
mtable[[ni,3]]<-tc
mtable[[ni,4]]<-osize
mtable[[ni,5]]<-tevs
mtable[[ni,6]]<-tfi
mtable[[ni,7]]<-tfc
# cat(n, ti, tc, osize,"\n")
}
bmattym<-data.frame(n=mtable[,1], buildi=mtable[,2], buildc=mtable[,3],
osize=mtable[,4], eigentime=mtable[,5], bfast=mtable[,6],
bfastc=mtable[,7])
print(bmattym)
cat("buildi - interpreted build time; buildc - byte compiled build time\n")
cat("osize - matrix size in bytes; eigentime - all eigensolutions time\n")
cat("bfast - interpreted vectorized build time; bfastc - same code, byte compiled time\n")
mbt<-10 # default to 10 repetitions in microbenchmark
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
molerfast <- function(n) {
# A fast version of `molermat'
A <- matrix(0, nrow = n, ncol = n)
j <- 1:n
for (i in 1:n) {
A[i, 1:i] <- pmin(i, 1:i) - 2
}
A <- A + t(A)
diag(A) <- 1:n
A
}
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=7) # to hold results
require(compiler)
molerc<-cmpfun(molermat) # compile it
molerfc<-cmpfun(molerfast)
# loop over sizes
for (ni in 1:nmax){
n<-50*ni
mtable[[ni, 1]]<-n
# Note using "us" for microseconds
ti<-microbenchmark(ai<-molermat(n), unit="us", times=mbt)$time
tc<-microbenchmark(ac<-molerc(n), unit="us", times=mbt)$time
if (! identical(ai, ac)) stop("Different outcomes == molermat, molerc")
tfi<-microbenchmark(afi<-molerfast(n), unit="us", times=mbt)$time
tfc<-microbenchmark(afc<-molerfc(n), unit="us", times=mbt)$time
if (! identical(ai, afi)) stop("Different outcomes == molermat, molerfast")
osize<-object.size(ac)
tevs<-microbenchmark(evs<-eigen(ac), unit="us", times=mbt)$time
mtable[[ni,2]]<-mean(ti)
mtable[[ni,3]]<-mean(tc)
mtable[[ni,4]]<-osize
mtable[[ni,5]]<-mean(tevs)
mtable[[ni,6]]<-mean(tfi)
mtable[[ni,7]]<-mean(tfc)
# cat(n, ti, tc, osize,"\n")
}
bmattym<-data.frame(n=mtable[,1], buildi=mtable[,2], buildc=mtable[,3],
osize=mtable[,4], eigentime=mtable[,5], bfast=mtable[,6],
bfastc=mtable[,7])
print(bmattym)
cat("buildi - interpreted build time; buildc - byte compiled build time\n")
cat("osize - matrix size in bytes; eigentime - all eigensolutions time\n")
cat("bfast - interpreted vectorized build time; bfastc - same code, byte compiled time\n")
bmattym
ti
tevs<-microbenchmark(evs<-eigen(ac), unit="us", times=mbt)$time
tevs
microbenchmark(evs<-eigen(ac), unit="us", times=mbt)$time
mbt
ac
system.time(eigen(ac))
?system.time
tevs
mbt<-10 # default to 10 repetitions in microbenchmark
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
molerfast <- function(n) {
# A fast version of `molermat'
A <- matrix(0, nrow = n, ncol = n)
j <- 1:n
for (i in 1:n) {
A[i, 1:i] <- pmin(i, 1:i) - 2
}
A <- A + t(A)
diag(A) <- 1:n
A
}
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=7) # to hold results
require(compiler)
molerc<-cmpfun(molermat) # compile it
molerfc<-cmpfun(molerfast)
# loop over sizes
for (ni in 1:nmax){
n<-50*ni
mtable[[ni, 1]]<-n
# Note "unit" argument is ONLY for display. time is in nanoseconds
ti<-microbenchmark(ai<-molermat(n), unit="us", times=mbt)$time
tc<-microbenchmark(ac<-molerc(n), unit="us", times=mbt)$time
if (! identical(ai, ac)) stop("Different outcomes == molermat, molerc")
tfi<-microbenchmark(afi<-molerfast(n), unit="us", times=mbt)$time
tfc<-microbenchmark(afc<-molerfc(n), unit="us", times=mbt)$time
if (! identical(ai, afi)) stop("Different outcomes == molermat, molerfast")
osize<-object.size(ac)
tevs<-microbenchmark(evs<-eigen(ac), unit="us", times=mbt)$time
mtable[[ni,2]]<-mean(ti)*0.001 # times in millisecs
mtable[[ni,3]]<-mean(tc)*0.001
mtable[[ni,4]]<-osize
mtable[[ni,5]]<-mean(tevs)*0.001
mtable[[ni,6]]<-mean(tfi)*0.001
mtable[[ni,7]]<-mean(tfc)*0.001
# cat(n, ti, tc, osize,"\n")
}
bmattym<-data.frame(n=mtable[,1], buildi=mtable[,2], buildc=mtable[,3],
osize=mtable[,4], eigentime=mtable[,5], bfast=mtable[,6],
bfastc=mtable[,7])
print(round(bmattym,0))
cat("buildi - interpreted build time; buildc - byte compiled build time\n")
cat("osize - matrix size in bytes; eigentime - all eigensolutions time\n")
cat("bfast - interpreted vectorized build time; bfastc - same code, byte compiled time\n")
cat("Times converted to milliseconds\n")
ti<-as.vector(mtable[,2])
tc<-as.vector(mtable[,3])
os<-as.vector(mtable[,4])
n<-as.vector(mtable[,1])
plot(n, ti)
title(main="Execution time vs matrix size")
title(sub="Regular Moler matrix routine, interpreted and byte compiled")
points(n, tc, pch=3, col='red')
legend(50,1,c("interpreted","byte compiled"), pch = c(1,3))
n2<-n*n
itime<-lm(ti~n+n2)
summary(itime)
ctime<-lm(tc~n+n2)
summary(ctime)
osize<-lm(os~n+n2)
summary(osize)
ti<-as.vector(mtable[,2])
tc<-as.vector(mtable[,3])
os<-as.vector(mtable[,4])
n<-as.vector(mtable[,1])
plot(n, ti)
title(main="Execution time vs matrix size")
title(sub="Regular Moler matrix routine, interpreted and byte compiled")
points(n, tc, pch=3, col='red')
legend(50,1,c("interpreted","byte compiled"), pch = c(1,3))
n2<-n*n
itime<-lm(ti~n+n2)
summary(itime)
ctime<-lm(tc~n+n2)
summary(ctime)
osize<-lm(os~n+n2)
summary(osize)
ti<-as.vector(mtable[,2])
tc<-as.vector(mtable[,3])
os<-as.vector(mtable[,4])
n<-as.vector(mtable[,1])
plot(n, ti)
title(main="Execution time vs matrix size")
title(sub="Regular Moler matrix routine, interpreted and byte compiled")
points(n, tc, pch=3, col='red')
legend(50,1,c("interpreted","byte compiled"), pch = c(1,3))
n2<-n*n
itime<-lm(ti~n+n2)
summary(itime)
ctime<-lm(tc~n+n2)
summary(ctime)
osize<-lm(os~n+n2)
summary(osize)
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
mbt<-10 # default to 10 repetitions in microbenchmark
ti<-as.vector(mtable[,2])
os<-as.vector(mtable[,3])
n<-as.vector(mtable[,1])
mbt<-10 # default to 10 repetitions in microbenchmark
molermat<-function(n){
A<-matrix(NA, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n) {
if (i == j) A[i,i]<-i
else A[i,j]<-min(i,j) - 2
}
}
A
}
molerfast <- function(n) {
# A fast version of `molermat'
A <- matrix(0, nrow = n, ncol = n)
j <- 1:n
for (i in 1:n) {
A[i, 1:i] <- pmin(i, 1:i) - 2
}
A <- A + t(A)
diag(A) <- 1:n
A
}
require(microbenchmark)
nmax<-10
mtable<-matrix(NA, nrow=nmax, ncol=5) # to hold results
# loop over sizes
for (ni in 1:nmax){
n<-50*ni
mtable[[ni, 1]]<-n
# Note "unit" argument is ONLY for display. time is in nanoseconds
ti<-microbenchmark(ai<-molermat(n), unit="us", times=mbt)$time
tfi<-microbenchmark(afi<-molerfast(n), unit="us", times=mbt)$time
if (! identical(ai, afi)) stop("Different outcomes == molermat, molerfast")
osize<-object.size(ai)
tevs<-microbenchmark(evs<-eigen(ai), unit="us", times=mbt)$time
mtable[[ni,2]]<-mean(ti)*0.001 # times in millisecs
mtable[[ni,3]]<-osize
mtable[[ni,4]]<-mean(tevs)*0.001
mtable[[ni,5]]<-mean(tfi)*0.001
#  cat(n, ti, osize,"\n")
}
bmattym<-data.frame(n=mtable[,1], buildi=mtable[,2],
osize=mtable[,3], eigentime=mtable[,4], bfast=mtable[,5])
print(round(bmattym,0))
cat("buildi - interpreted build time\n")
cat("osize - matrix size in bytes; eigentime - all eigensolutions time\n")
cat("bfast - interpreted vectorized build time\n")
cat("Times converted to milliseconds\n")
ti<-as.vector(mtable[,2])
os<-as.vector(mtable[,3])
n<-as.vector(mtable[,1])
plot(n, ti)
title(main="Execution time vs matrix size")
title(sub="Regular Moler matrix routine")
legend(50,1,c("interpreted"), pch = c(1,3))
n2<-n*n
itime<-lm(ti~n+n2)
summary(itime)
osize<-lm(os~n+n2)
summary(osize)
ls()
mtable
plot(mtable[,1], mtable[,2])
xx<-1:500
ls(()
ls()
itime
iti<-coef(itime)
iti
yy<-iti[1]+iti[2]*xx+iti[3]*xx*xx
yy
points(xx,yy)
points(xx,yy, type='l')
graphics.off
graphics.off()
plot(mtable[,1], mtable[,2])
points(xx,yy, type='l')
ti<-as.vector(mtable[,2])
os<-as.vector(mtable[,3])
n<-as.vector(mtable[,1])
plot(n, ti)
xx<-1:max(mtable[,1])
iti<-coef(itime)
yy<-iti[1]+iti[2]*xx+iti[3]*xx*xx
points(xx,yy, type='l')
title(main="Execution time vs matrix size")
title(sub="Regular Moler matrix routine")
legend(50,1,c("interpreted"), pch = c(1,3))
n2<-n*n
itime<-lm(ti~n+n2)
summary(itime)
osize<-lm(os~n+n2)
summary(osize)
